generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccessType {
  DIGITAL
  PRESENCIAL
  HYBRID
}

enum Status {
  ACTIVE
  INACTIVE
}

enum TicketSalesStatus {
  AVAILABLE
  SOLD_OUT
  PAUSED
}

enum DiscountType {
  PERCENTAGE
  INTEGER
}

enum CouponStatus {
  AVAILABLE
  PAUSED
}

enum AvailabilityType {
  UNLIMITED
  LIMITED
}

enum Currency {
  BRL
  USD
  EUR
}

enum CartStatus {
  OPEN
  CHECKED_OUT
}

enum TicketStockType {
  UNLIMITED
  LIMITED
}

model Owner {
  id          String     @id @default(cuid())
  name        String
  organizerId String     @unique
  accessType  AccessType @default(DIGITAL)
  status      Status     @default(ACTIVE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Ticket      Ticket[]

  @@map("owners")
}

model Ticket {
  id             String            @id @default(cuid())
  name           String
  description    String?
  ownerId        String
  accessType     AccessType        @default(DIGITAL)
  saleStatus     TicketSalesStatus @default(AVAILABLE)
  usedQuantity   Int               @default(0)
  position       Int               @default(0)
  hidden         Boolean           @default(false)
  categoryId     String?
  status         Status            @default(ACTIVE)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  priceValue     Int               @default(0)
  stockTotal     Int               @default(0)
  stockAvailable Int               @default(0)
  stockType      TicketStockType   @default(UNLIMITED)
  currency       Currency          @default(BRL)

  owner Owner @relation(fields: [ownerId], references: [id])

  @@map("tickets")
}

model Cart {
  id            String         @id @default(uuid())
  ownerId       String
  status        Status         @default(ACTIVE)
  statusCart    CartStatus     @default(OPEN)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  items         CartItem[]     @relation("CartItems")
  customerEmail String?
  customerName  String?
  marketingData MarketingData?

  @@map("carts")
}

model CartItem {
  id       String @id @default(uuid())
  cartId   String
  itemId   String
  quantity Int
  users    User[] @relation("ItemUsers")
  cart     Cart   @relation(fields: [cartId], references: [id], name: "CartItems")

  @@map("cart_items")
}

model User {
  id        String   @id @default(uuid())
  itemId    String
  name      String
  email     String
  infoExtra Json
  item      CartItem @relation(fields: [itemId], references: [id], name: "ItemUsers")

  @@map("cart_users")
}

model MarketingData {
  id          String  @id @default(uuid())
  cartId      String  @unique
  utmMedium   String?
  utmSource   String?
  utmCampaign String?
  utmContent  String?
  cart        Cart    @relation(fields: [cartId], references: [id])
  Order       Order[]

  @@map("marketing_data")
}

model Order {
  id             String         @id @default(uuid())
  cartId         String
  ownerId        String
  status         Status         @default(ACTIVE)
  total_amount   Int            @default(0)
  total_items    Int            @default(0)
  total_discount Int            @default(0)
  total_tax      Int            @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  items          OrderItem[]    @relation("OrderItems")
  customerId     String
  marketingData  MarketingData? @relation(fields: [marketingDataId], references: [id])

  marketingDataId String?
  Customer        Customer              @relation(fields: [customerId], references: [id])
  billingAddress  OrderBillingAddress[]

  @@map("orders")
}

model Customer {
  id           String   @id @default(uuid())
  name         String
  email        String
  document     String
  documentType String
  phone        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       Order[]

  @@map("customers")
}

model OrderItem {
  id       String          @id @default(uuid())
  orderId  String
  itemId   String
  name     String
  price    Int             @default(0)
  discount Int             @default(0)
  quantity Int
  users    OrderItemUser[] @relation("OrderItemUsers")
  order    Order           @relation(fields: [orderId], references: [id], name: "OrderItems")

  @@map("order_items")
}

model OrderItemUser {
  id          String    @id @default(uuid())
  orderItemId String
  name        String
  email       String
  infoExtra   Json
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], name: "OrderItemUsers")

  @@map("order_item_users")
}

model OrderBillingAddress {
  id           String  @id @default(uuid())
  orderId      String
  street       String
  number       String?
  complement   String?
  city         String
  state        String
  neighborhood String
  country      String? @default("BR")
  zipCode      String
  order        Order   @relation(fields: [orderId], references: [id])

  @@map("order_billing_addresses")
}

model Coupon {
  id                String           @id @default(uuid())
  code              String
  ownerId           String
  description       String?
  statusCoupon      CouponStatus     @default(AVAILABLE)
  enforceInTickets  String[]         @default([])
  discountType      DiscountType
  discountValue     Int
  usedQuantity      Int              @default(0)
  availabilityType  AvailabilityType
  availabilityTotal Int?
  availabilityQty   Int?
  status            Status           @default(ACTIVE)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("coupons")
}
